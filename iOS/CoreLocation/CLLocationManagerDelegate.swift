
protocol CLLocationManagerDelegate : NSObjectProtocol {
  @available(iOS 6.0, *)
  optional func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation])
  @available(iOS 3.0, *)
  optional func locationManager(_ manager: CLLocationManager, didUpdateHeading newHeading: CLHeading)
  @available(iOS 3.0, *)
  optional func locationManagerShouldDisplayHeadingCalibration(_ manager: CLLocationManager) -> Bool
  @available(iOS 7.0, *)
  optional func locationManager(_ manager: CLLocationManager, didDetermineState state: CLRegionState, for region: CLRegion)
  @available(iOS, introduced: 7.0, deprecated: 13.0)
  optional func locationManager(_ manager: CLLocationManager, didRangeBeacons beacons: [CLBeacon], in region: CLBeaconRegion)
  @available(iOS, introduced: 7.0, deprecated: 13.0)
  optional func locationManager(_ manager: CLLocationManager, rangingBeaconsDidFailFor region: CLBeaconRegion, withError error: Error)
  @available(iOS 13.0, *)
  optional func locationManager(_ manager: CLLocationManager, didRange beacons: [CLBeacon], satisfying beaconConstraint: CLBeaconIdentityConstraint)
  @available(iOS 13.0, *)
  optional func locationManager(_ manager: CLLocationManager, didFailRangingFor beaconConstraint: CLBeaconIdentityConstraint, error: Error)
  @available(iOS 4.0, *)
  optional func locationManager(_ manager: CLLocationManager, didEnterRegion region: CLRegion)
  @available(iOS 4.0, *)
  optional func locationManager(_ manager: CLLocationManager, didExitRegion region: CLRegion)
  @available(iOS 2.0, *)
  optional func locationManager(_ manager: CLLocationManager, didFailWithError error: Error)
  @available(iOS 4.0, *)
  optional func locationManager(_ manager: CLLocationManager, monitoringDidFailFor region: CLRegion?, withError error: Error)
  @available(iOS, introduced: 4.2, deprecated: 14.0)
  optional func locationManager(_ manager: CLLocationManager, didChangeAuthorization status: CLAuthorizationStatus)
  @available(iOS 14.0, *)
  optional func locationManagerDidChangeAuthorization(_ manager: CLLocationManager)
  @available(iOS 5.0, *)
  optional func locationManager(_ manager: CLLocationManager, didStartMonitoringFor region: CLRegion)
  @available(iOS 6.0, *)
  optional func locationManagerDidPauseLocationUpdates(_ manager: CLLocationManager)
  @available(iOS 6.0, *)
  optional func locationManagerDidResumeLocationUpdates(_ manager: CLLocationManager)
  @available(iOS 6.0, *)
  optional func locationManager(_ manager: CLLocationManager, didFinishDeferredUpdatesWithError error: Error?)
  @available(iOS 8.0, *)
  optional func locationManager(_ manager: CLLocationManager, didVisit visit: CLVisit)
}
