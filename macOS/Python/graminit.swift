
var single_input: Int32 { get }
var file_input: Int32 { get }
var eval_input: Int32 { get }
var decorator: Int32 { get }
var decorators: Int32 { get }
var decorated: Int32 { get }
var funcdef: Int32 { get }
var parameters: Int32 { get }
var varargslist: Int32 { get }
var fpdef: Int32 { get }
var fplist: Int32 { get }
var stmt: Int32 { get }
var simple_stmt: Int32 { get }
var small_stmt: Int32 { get }
var expr_stmt: Int32 { get }
var augassign: Int32 { get }
var print_stmt: Int32 { get }
var del_stmt: Int32 { get }
var pass_stmt: Int32 { get }
var flow_stmt: Int32 { get }
var break_stmt: Int32 { get }
var continue_stmt: Int32 { get }
var return_stmt: Int32 { get }
var yield_stmt: Int32 { get }
var raise_stmt: Int32 { get }
var import_stmt: Int32 { get }
var import_name: Int32 { get }
var import_from: Int32 { get }
var import_as_name: Int32 { get }
var dotted_as_name: Int32 { get }
var import_as_names: Int32 { get }
var dotted_as_names: Int32 { get }
var dotted_name: Int32 { get }
var global_stmt: Int32 { get }
var exec_stmt: Int32 { get }
var assert_stmt: Int32 { get }
var compound_stmt: Int32 { get }
var if_stmt: Int32 { get }
var while_stmt: Int32 { get }
var for_stmt: Int32 { get }
var try_stmt: Int32 { get }
var with_stmt: Int32 { get }
var with_item: Int32 { get }
var except_clause: Int32 { get }
var suite: Int32 { get }
var testlist_safe: Int32 { get }
var old_test: Int32 { get }
var old_lambdef: Int32 { get }
var test: Int32 { get }
var or_test: Int32 { get }
var and_test: Int32 { get }
var not_test: Int32 { get }
var comparison: Int32 { get }
var comp_op: Int32 { get }
var expr: Int32 { get }
var xor_expr: Int32 { get }
var and_expr: Int32 { get }
var shift_expr: Int32 { get }
var arith_expr: Int32 { get }
var term: Int32 { get }
var factor: Int32 { get }
var power: Int32 { get }
var atom: Int32 { get }
var listmaker: Int32 { get }
var testlist_comp: Int32 { get }
var lambdef: Int32 { get }
var trailer: Int32 { get }
var subscriptlist: Int32 { get }
var `subscript`: Int32 { get }
var sliceop: Int32 { get }
var exprlist: Int32 { get }
var testlist: Int32 { get }
var dictorsetmaker: Int32 { get }
var classdef: Int32 { get }
var arglist: Int32 { get }
var argument: Int32 { get }
var list_iter: Int32 { get }
var list_for: Int32 { get }
var list_if: Int32 { get }
var comp_iter: Int32 { get }
var comp_for: Int32 { get }
var comp_if: Int32 { get }
var testlist1: Int32 { get }
var encoding_decl: Int32 { get }
var yield_expr: Int32 { get }
